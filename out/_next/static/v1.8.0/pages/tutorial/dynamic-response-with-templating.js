(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"2zQA":function(e,l,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/dynamic-response-with-templating",function(){return n("ovOx")}])},"7AjB":function(e,l,n){"use strict";n.r(l);var t=n("q1tI"),a=n.n(t).a.createElement;l.default=function(e){return a("div",{className:"columns"},a("div",{className:"medium"===e.size?"column is-6 is-offset-3":"column is-8 is-offset-2"},a("figure",{className:"image"},a("img",{src:e.src,alt:e.alt}))))}},JRJN:function(e,l,n){"use strict";var t=n("q1tI"),a=n.n(t).a.createElement;l.a=function(){return a("section",{className:"section is-light"},a("div",{className:"container has-text-centered has-text-weight-semibold"},a("p",{className:"title is-6"},"Get Mockoon latest version and start mocking!"),a("p",null,a("a",{className:"button is-primary",href:"/#download"},a("span",null,"Download")))))}},ovOx:function(e,l,n){"use strict";n.r(l);var t=n("q1tI"),a=n.n(t),r=n("q2Nh"),o=n("7AjB"),i=a.a.createElement,u={title:"Create dynamic responses with templating",description:"Create dynamic responses for your mock server with Mockoon's templating system."};l.default=function(){return i(r.a,{meta:u},i("div",{className:"content"},"Mockoon's implements"," ",i("a",{href:"https://github.com/webroo/dummy-json",target:"_blank"},"Dummy JSON")," ","library in order to create dynamic responses. This templating system is supported in response's ",i("strong",null,"body"),", ",i("strong",null,"headers"),","," ",i("strong",null,"file content"),", and ",i("strong",null,"file path"),".",i("h3",null,"Available helpers"),i("p",null,"Dummy JSON offers lots of built-in helpers: ",i("code",null,"repeat"),","," ",i("code",null,"int"),", ",i("code",null,"float"),", ",i("code",null,"date"),","," ",i("code",null,"time"),", ",i("code",null,"title"),", ",i("code",null,"firstName"),","," ",i("code",null,"lastName"),", ",i("code",null,"company"),", ",i("code",null,"latitude"),","," ",i("code",null,"longitude"),", ",i("code",null,"domain"),", ",i("code",null,"TLD"),","," ",i("code",null,"email"),", ",i("code",null,"street"),", ",i("code",null,"city"),","," ",i("code",null,"country"),", ",i("code",null,"phone"),", ",i("code",null,"color"),","," ",i("code",null,"hexColor"),", ",i("code",null,"guid"),", ",i("code",null,"ipv4"),","," ",i("code",null,"ipv6"),", ",i("code",null,"lorem"),", ",i("code",null,"lowercase"),","," ",i("code",null,"uppercase"),", etc. Please have a look at"," ",i("a",{href:"https://github.com/webroo/dummy-json#available-helpers",target:"_blank"},"Dummy JSON documentation")," ","to learn how to use them."),i("p",null,"In addition to these helpers, some custom ones have been added to Mockoon:"),i("ul",null,i("li",null,i("code",null,"array 'item1' 'item2' 'item3'"),": create an array from items (to be used in the next helpers oneOf, someOf)"),i("li",null,i("code",null,"oneOf (array 'item1' 'item2' 'item3')"),": select a random item in the array passed in parameters"),i("li",null,i("code",null,"someOf (array 'item1' 'item2' 'item3') x y"),": returns x to y random items from the array passed in parameters concatenated as a string (to be used with double curly braces), result is the following: ",i("code",null,"item1,item2")),i("li",null,i("code",null,"{{{someOf (array 'item1' 'item2' 'item3') x y true}}}"),": returns x to y random items from the array passed in parameters as an array (to be used with triple curly braces), result is the following: ",i("code",null,'["item1","item2"]')),i("li",null,i("code",null,"#switch ... #case ... #default"),": select content depending on a variable, like a normal switch :) (see example below)")),i("p",null,"Mockoon also supports the following helpers which can gather request information:"),i("ul",null,i("li",null,i("code",null,"body 'path' 'default value'"),": get a path from a request body's JSON by default or from form params if request's"," ",i("code",null,"Content-Type")," header is set to"," ",i("code",null,"application/x-www-form-urlencoded"),". Path has the following form ",i("code",null,"key.0.key.5.key")," for JSON (syntax is based on"," ",i("a",{href:"https://www.npmjs.com/package/object-path"},"NPM ",i("strong",null,"object-path")," package"),"), or directly a param name like ",i("code",null,"firstname")," for form params."),i("li",null,i("code",null,"urlParam 'paramName1'"),": get a param from the URL"," ",i("code",null,"/:paramName1/:paramName2")),i("li",null,i("code",null,"queryParam 'param1' 'default value'"),": get a param from the query string ",i("code",null,"?param1=xxx&param2=yyy")," or a default value if param is not present"),i("li",null,i("code",null,"cookie 'cookie_name' 'default value'"),": get the content of a cookie or a default value if the cookie is not present"),i("li",null,i("code",null,"header 'Header-Name' 'default value'"),": get content from any request header or a default value if header is not present"),i("li",null,i("code",null,"hostname"),": get request hostname"),i("li",null,i("code",null,"ip"),": get request IP address"),i("li",null,i("code",null,"method "),": get request method (GET, PUT, POST, etc.)"),i("li",null,i("code",null,"now 'YYYY-MM-DD'"),": display current time in the chosen format. Format syntax is based on"," ",i("a",{href:"https://date-fns.org/v2.11.1/docs/format"},"date-fns package (v2)")," ","and is optional. Without providing it this helper will display an ISO string")),i("p",null,i("em",null,"Please note that a space always follows the helper name and separates each and all params like in"," ",i("code",null,"oneOf\xa0*space*\xa0(array\xa0*space*\xa0'item1'\xa0*space*\xa0'item2')"),". Also, parenthesis serve to prioritize a helper over another and not to symbolize a function call. Helpers does not require parenthesis in order to work.")),i("h3",null,"Body and file content templating"),i("p",null,"Templating will work in the body textarea without consideration for the Content-Type that has been defined. It will also work with files content for a limited set of MIME types (",i("code",null,"application/json"),", ",i("code",null,"text/html"),", ",i("code",null,"text/css"),", ",i("code",null,"text/csv"),", ",i("code",null,"application/javascript"),","," ",i("code",null,"application/typescript"),", ",i("code",null,"text/plain"),","," ",i("code",null,"application/xhtml+xml"),", ",i("code",null,"application/xml"),")."),i("p",null,"Here is an example of what you can do with this templating system:"),i("p",null,i("code",null,"{",i("br",null),' "userId": "{{ urlParam \'id\'}}",',i("br",null)," \"name\": \"{{ queryParam 'name' 'John' }}\",",i("br",null)," \"lang\": \"{{{header 'Accept-Language' 'en'}}}\",",i("br",null)," \"elementTitle\": \"{{ body 'elements.0.title' 'default' }}\",",i("br",null),' "ip": "{{ ip }}",',i("br",null),' "method": "{{ method }}",',i("br",null),' "hostname": "{{ hostname }}",',i("br",null),' "friends": [',i("br",null)," {{#repeat 2}}",i("br",null)," {",i("br",null),' "id": {{@index}},',i("br",null),' "name": "{{ firstName }} {{ lastName }}"',i("br",null)," }",i("br",null)," {{/ repeat}}",i("br",null)," ],",i("br",null)," \"oneItem\": \"{{ oneOf (array 'item1' 'item2' 'item3') }}\",",i("br",null)," \"someItemsAsString\": \"{{ someOf (array 'item1' 'item2' 'item3') 1 2 }}\",",i("br",null)," \"someItemsAsArray\": {{{ someOf (array 'item1' 'item2' 'item3') 1 2 true }}},",i("br",null),' "userName":',i("br",null)," {{#switch (urlParam 'id')}}",i("br",null),' {{#case "1"}}"John"{{/case}}',i("br",null),' {{#case "2"}}"Jack"{{/case}}',i("br",null),' {{#default}}"Peter"{{/default }}',i("br",null)," {{/switch}}",i("br",null),"}"))),i(o.default,{src:"/images/tutorials/body-templating.jpg",alt:"Body response templating",size:"medium"}),i("div",{className:"content"},i("p",null,"And the response you can get with the following request:"),i("p",null,i("code",null,"GET /user/123456?name=john",i("br",null),"Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",i("br",null),"Body:",i("br",null),"{",i("br",null),' "element": [{"title": "My title"}]',i("br",null),"}"),i("br",null),i("br",null),"Response:",i("br",null),i("code",null,"{",i("br",null),' "userId": "5",',i("br",null),' "name": "john",',i("br",null),' "lang": "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7",',i("br",null),' "elementTitle": "My title",',i("br",null),' "ip": "::1",',i("br",null),' "method": "GET",',i("br",null),' "hostname": "localhost",',i("br",null),' "friends": [',i("br",null)," {",i("br",null),' "id": 0,',i("br",null),' "name": "Stephen Bradbury"',i("br",null)," },",i("br",null)," {",i("br",null),' "id": 1,',i("br",null),' "name": "Warren Caffey"',i("br",null)," }",i("br",null)," ],",i("br",null),' "oneItem":"item1",',i("br",null),' "someItemsAsString":"item2",',i("br",null),' "someItemsAsArray":["item2", "item3"],',i("br",null),' "userName":"John"',i("br",null),"}")),i("p",null,"This system is flexible enough so you can generate a lot of different contents like CSV files:"),i("p",null,i("code",null,"firstname,lastname,countryCode",i("br",null),"{{#repeat 10}}",i("br",null)," ","{{firstName}},{{lastName}},{{countryCode}}",i("br",null),"{{/repeat}}"),i("br",null),i("br",null),"Response:",i("br",null),i("code",null,"firstname,lastname,countryCode",i("br",null),"Max,Magby,AZ",i("br",null),"Stan,Muldoon,HM",i("br",null),"Drew,Rebelo,CY",i("br",null),"Cory,Neal,BG",i("br",null),"Grace,Whitson,CY",i("br",null),"Haydee,Backer,ET",i("br",null),"Erik,Friedrich,MX",i("br",null),"Stephen,Paquette,PH",i("br",null),"Neida,Durrett,PN",i("br",null),"Vaughn,Neal,MO"))),i("div",{className:"content"},i("h3",null,"File input templating"),i("p",null,"The ",i("strong",null,"file input field")," in each route also supports templating with the same helpers. This allows you to dynamically serve files depending on the request parameters, like ",i("code",null,"urlParam")," ","or any other helper. Example:"),i("p",null,"If you have a set of files named ",i("code",null,"./file1.json"),","," ",i("code",null,"./file2.json"),", etc and a route named ",i("code",null,"/:id")," you can use the ",i("code",null,"urlParam")," helper in the file input:"," ",i("code",null,"c:/.../file{{ urlParam 'id'}}.json"),"."),i("p",null,"If you call this route with an id ",i("code",null,"/1"),","," ",i("code",null,"./file1.json")," will be sent.")),i(o.default,{src:"/images/tutorials/file-input-templating.jpg",alt:"File input templating",size:"medium"}),i("div",{className:"content"},i("h3",null,"Headers templating"),i("p",null,"Finally, templating helpers are also supported in"," ",i("strong",null,"headers values")," (both route headers and environment headers):")),i(o.default,{src:"/images/tutorials/header-templating.jpg",alt:"Headers value templating",size:"medium"}))}},q2Nh:function(e,l,n){"use strict";var t=n("q1tI"),a=n.n(t),r=n("JRJN"),o=n("35FW"),i=a.a.createElement,u=function(){return i("div",{className:"content"},i("h4",{className:"has-text-centered has-text-weight-semibold"},i("a",{href:"/tutorials"},"Back to all tutorials")))},s=n("TFgK"),m=n("8lBQ"),c=n("9qQb"),d=a.a.createElement;l.a=function(e){return d(s.a,null,d(c.a,{title:e.meta.title,description:e.meta.description}),d(m.a,{title:e.meta.title,subtitle:e.meta.description}),d(r.a,null),d("div",{className:"section"},d("div",{className:"container"},e.children,d(u,null))),d(o.a,null))}}},[["2zQA",0,1,3,2,4]]]);